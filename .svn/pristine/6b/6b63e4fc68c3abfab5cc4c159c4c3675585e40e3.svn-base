package com.fy.msgsys.server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import com.fy.msgsys.server.util.SignChatroomUtil;
import com.fy.msgsys.server.util.SocketConstant;
import com.fy.msgsys.server.util.UserUtil;

public class NormalforJavaServer  extends Thread{

	private final static int PROT = 8866;
	
	
    @Override
	public void run() {
    	try {
			start1();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

    /**
     * socket 处理程序启动
     * @throws IOException
     */
	public void start1() throws IOException{
		ServerSocket server = new ServerSocket(PROT);
		System.out.println("socket 处理程序 监听 ：" + PROT );
		Executor pool =
			    Executors.newFixedThreadPool(2);
    	while(true){
    		try {
    			final Socket ss = server.accept();
    			if(handlerShake(ss))
    				pool.execute((new ServerThread1(ss)));
    			else
    				ss.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
    	}
    	
    }
    private DataOutputStream dsout ;
    private DataInputStream dsin;
    
    /**
     * 验证socket 用户
     * @param ss
     * @return
     */
    private boolean handlerShake(Socket ss){
    	boolean pass = false;
    	try {
			dsout = new DataOutputStream(ss.getOutputStream());
	    	dsin  = new DataInputStream(ss.getInputStream());
	    	int readLen = dsin.readInt();
	    	byte[] buf = new byte[readLen];
	    	dsin.read(buf, 0, readLen);
	    	String veriUser = new String(buf);
System.out.println("允许登录用户信息（用户ID和验证码）："+veriUser);
	    	
	    	dsout.writeInt(veriUser.length());
	    	dsout.flush();
	    	dsout.writeUTF("ackPass");
	    	dsout.flush();
	    	pass = true;
		} catch (IOException e) {
			e.printStackTrace();
		}

    	return pass;
    }
    
    /**
     * 负责处理wtbweb 发送的命令
     * @author wurunzhou
     *
     */
	class ServerThread1 implements Runnable {

		public ServerThread1(Socket serverfork) {
System.out.println("socket 验证通过 接受一个连接……");
		}

		@Override
		public void run() {
System.out.println("启动新的线程处理 读写操作");
			new Thread(new ReciveThreaS4()).start();
			//new Thread(new SendThreadS4()).start();
		}
	}
	
	/**
	 * 内部类
	 * <br> 该线程服务器接收消息，解析消息，回复用户
	 * @author wurunzhou
	 *
	 */
    class ReciveThreaS4 implements Runnable{

		@Override
		public void run() {
			while(true){
				try {
					String cMsg = reciveText();
					if(process(cMsg))
						sendText(cMsg + " :200ok");
				} catch (IOException e) {
					e.printStackTrace();
					break;
				}
			}
		}
    	
    }
    
    /**
     * 处理消息
     * <br> 接收来web服务器的消息
     * 功能包括：用户登录，用户退出，已有互动室，创建互动室（帮区，私聊）
     * 消息内容是：用户ID：验证码，用户ID,用户ID：互动室视图ID列表，互动室视图ID：互动室用户列表
     * @param message 来自吾托帮 web的命令
     * @return
     */
	private boolean process(String message) {

		if(message == null || "".equals(message))
			return false;
		boolean pass = false;
		
		String tmp = message.length()>=3? message.substring(0, Integer.parseInt(SocketConstant.splitLen.getRssURL())):"";

		if (SocketConstant.holeLoginUser.getRssURL().equals(tmp)) {
			// 发送的是待登录用户
			String[] vU = message.substring(3, message.length()).split(SocketConstant.splitUV.getRssURL());
			UserUtil.getInstance().add(vU[0], vU[1]);
			pass = true;
		} else if (SocketConstant.hlUserChats.getRssURL().equals(tmp)) {
			// 发送的是待登录用户 互动室列表
			String[] vU = message.substring(3, message.length()).split(SocketConstant.splitUC.getRssURL());
			//System.out.println(vU[0]);
System.out.println("用户"+ vU[0] +" ,对应的互动室  " +string2list(vU[1]).toString());
			SignChatroomUtil.getInstance().loginIn(vU[0], string2list(vU[1]));
			pass = true;
		} else if(SocketConstant.quitUser.getRssURL().equals(tmp)) {
			//String[] vU = message.substring(4, message.length()).split(":");
			String vU = message.substring(4, message.length());
System.out.println("用户 "+ vU + " 退出");

		} else {
			// 发送的是 消息
			System.out.println("client say:"+message);
			pass = true;
		}

		return pass;
	}
	
	private List<String> string2list(String mes){
		String tmp = mes.substring(1, mes.length()-1);
		List<String> lala = new ArrayList<String>();
		for(String lal :tmp.split(",")){
			lala.add(lal.trim());
		}
		return lala;
	}
    
    class SendThreadS4 implements Runnable{

		@Override
		public void run() {
			int i = 0;
			while(true){
				try {
					TimeUnit.SECONDS.sleep(5);
					sendText("hello client "+ i++);
				} catch (InterruptedException e) {
					e.printStackTrace();
					break;
				} catch (IOException e) {
					e.printStackTrace();
					break;
				}
			}
		}
    	
    }
    
    /**
     * 接收消息 
     * <br> 忽略 消息头的消息长度，直接读消息体（文本）
     * @return 文本消息
     * @throws IOException
     */
    private String reciveText() throws IOException{
    	int readLen = dsin.readInt();
    	byte[] bb = new byte[1024];
/*    	if(readLen != -1){
    		dsin.read(bb, 0, readLen);
    	}*/
    	String msg = dsin.readUTF();
    	return msg;
    }
    private void  sendText(String message) throws IOException{
    	int len = message.length();
    	dsout.writeInt(len);
    	dsout.flush();
    	dsout.writeUTF(message);
    	dsout.flush();
    	
    }
    
}



